DROP DATABASE IF EXISTS `social`;

CREATE DATABASE `social`;

use social;

CREATE TABLE users (
id INT(6) NOT NULL UNSIGNED AUTO_INCREMENT PRIMARY KEY,
username VARCHAR(15) NOT NULL,
password VARCHAR(30) NOT NULL ,
firstname VARCHAR(30) NOT NULL,
lastname VARCHAR(30) NOT NULL,
email VARCHAR(50) UNIQUE,
created_at TIMESTAMP
);



CREATE TABLE posts (
id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
user_id INT(6) UNSIGNED,
text VARCHAR(1000),
created_at TIMESTAMP,
photo VARCHAR(100),
comments VARCHAR(45),
status VARCHAR(45),

FOREIGN KEY ( user_id )
		REFERENCES social.users(id)
		ON DELETE CASCADE ON UPDATE CASCADE
);


CREATE TABLE users_firends(
id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
user_id INT(6) UNSIGNED,
friend_id INT(6) UNSIGNED,
created_at TIMESTAMP,

FOREIGN KEY ( user_id )
		REFERENCES social.users(id)
		ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY ( friend_id )
		REFERENCES social.users(id)
		ON DELETE CASCADE ON UPDATE CASCADE
);



CREATE TABLE post_status(
id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
post_id INT(6) UNSIGNED,
count_likes INT,

FOREIGN KEY ( post_id )
		REFERENCES social.posts(id)
		ON DELETE CASCADE ON UPDATE CASCADE
);



CREATE TABLE albums(
id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
user_id INT(6) UNSIGNED,
post_id INT(6) UNSIGNED,
created_at TIMESTAMP,

FOREIGN KEY ( user_id )
		REFERENCES social.users(id)
		ON DELETE CASCADE ON UPDATE CASCADE

FOREIGN KEY ( post_id )
		REFERENCES social.posts(id)
		ON DELETE CASCADE ON UPDATE CASCADE
);




CREATE TABLE post_comments(
id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
user_id INT(6) UNSIGNED,
post_id INT(6) UNSIGNED,
comment_text VARCHAR(1000),
created_at TIMESTAMP,

FOREIGN KEY ( user_id )
		REFERENCES social.users(id)
		ON DELETE CASCADE ON UPDATE CASCADE

FOREIGN KEY ( post_id )
		REFERENCES social.posts(id)
		ON DELETE CASCADE ON UPDATE CASCADE
);

